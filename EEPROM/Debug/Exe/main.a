;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// I2C Bus functions
;#include <i2c.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;#include <delay.h>
;
;// Declare your global variables here
;
;#define DEVICE_ADDR            0xA0
;
;void EEPROM_writeByte(unsigned char devAddr, unsigned char memAddr, unsigned char data);
;unsigned char EEPROM_readByte(unsigned char devAddr, unsigned char memAddr);
;
;void EEPROM_writePage(unsigned char devAddr, unsigned char memAddr, unsigned char* data, unsigned char len);
;void EEPROM_readPage(unsigned char devAddr, unsigned char memAddr, unsigned char* data, unsigned char len);
;
;#include <stdio.h>
;
;
;void main(void)
; 0000 0019 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 001A // Declare your local variables here
; 0000 001B unsigned char data;
; 0000 001C char tempStr[6] = "Hello";
; 0000 001D char str[16];
; 0000 001E 
; 0000 001F // Input/Output Ports initialization
; 0000 0020 // Port A initialization
; 0000 0021 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0022 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;	data -> R17
;	tempStr -> Y+16
;	str -> Y+0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0023 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0024 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0025 
; 0000 0026 // Port B initialization
; 0000 0027 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0028 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0029 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 002A PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 002B 
; 0000 002C // Port C initialization
; 0000 002D // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 002E DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 002F // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0030 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0031 
; 0000 0032 // Port D initialization
; 0000 0033 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0034 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0035 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0036 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0037 
; 0000 0038 // Bit-Banged I2C Bus initialization
; 0000 0039 // I2C Port: PORTD
; 0000 003A // I2C SDA bit: 1
; 0000 003B // I2C SCL bit: 0
; 0000 003C // Bit Rate: 100 kHz
; 0000 003D // Note: I2C settings are specified in the
; 0000 003E // Project|Configure|C Compiler|Libraries|I2C menu.
; 0000 003F i2c_init();
;PCODE: $0000002B VOL: 0
; 0000 0040 
; 0000 0041 // Alphanumeric LCD initialization
; 0000 0042 // Connections are specified in the
; 0000 0043 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 0044 // RS - PORTA Bit 0
; 0000 0045 // RD - PORTA Bit 1
; 0000 0046 // EN - PORTA Bit 2
; 0000 0047 // D4 - PORTA Bit 4
; 0000 0048 // D5 - PORTA Bit 5
; 0000 0049 // D6 - PORTA Bit 6
; 0000 004A // D7 - PORTA Bit 7
; 0000 004B // Characters/line: 16
; 0000 004C lcd_init(16);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 004D 
; 0000 004E /*data = EEPROM_readByte(DEVICE_ADDR, 20);
; 0000 004F sprintf(str, "%u", data);
; 0000 0050 EEPROM_writeByte(DEVICE_ADDR, 20, ++data);*/
; 0000 0051 
; 0000 0052 EEPROM_writePage(DEVICE_ADDR, 25, tempStr, sizeof(tempStr));
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0053 EEPROM_readPage(DEVICE_ADDR, 25, str, sizeof(tempStr));
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0054 
; 0000 0055 lcd_clear();
;PCODE: $0000003E VOL: 0
; 0000 0056 lcd_puts(str);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0057 
; 0000 0058 
; 0000 0059 while (1)
;PCODE: $00000041 VOL: 0
; 0000 005A       {
; 0000 005B       // Place your code here
; 0000 005C 
; 0000 005D       }
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 005E }
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;
;void EEPROM_writeByte(unsigned char devAddr, unsigned char memAddr, unsigned char data){
; 0000 0060 void EEPROM_writeByte(unsigned char devAddr, unsigned char memAddr, unsigned char data){
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0061     i2c_start();
;PCODE: $0000004A VOL: 0
;	devAddr -> Y+2
;	memAddr -> Y+1
;	data -> Y+0
;PCODE: $0000004B VOL: 0
; 0000 0062     i2c_write(devAddr);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0063     i2c_write(memAddr);
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0064     i2c_write(data);
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0065     i2c_stop();
;PCODE: $00000052 VOL: 0
; 0000 0066     delay_ms(5);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0067 }
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;unsigned char EEPROM_readByte(unsigned char devAddr, unsigned char memAddr){
; 0000 0068 unsigned char EEPROM_readByte(unsigned char devAddr, unsigned char memAddr){
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0069     unsigned char temp;
; 0000 006A     i2c_start();
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;	devAddr -> Y+2
;	memAddr -> Y+1
;	temp -> R17
;PCODE: $0000005D VOL: 0
; 0000 006B     i2c_write(devAddr);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 006C     i2c_write(memAddr);
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 006D     i2c_start();
;PCODE: $00000062 VOL: 0
; 0000 006E     i2c_write(devAddr | 1);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 006F     temp = i2c_read(0);
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0070     i2c_stop();
;PCODE: $0000006A VOL: 0
; 0000 0071     return temp;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0072 }
;PCODE: $00000070 VOL: 0
;
;void EEPROM_writePage(unsigned char devAddr, unsigned char memAddr, unsigned char* data, unsigned char len){
; 0000 0074 void EEPROM_writePage(unsigned char devAddr, unsigned char memAddr, unsigned char* data, unsigned char len){
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0075     i2c_start();
;PCODE: $00000073 VOL: 0
;	devAddr -> Y+4
;	memAddr -> Y+3
;	*data -> Y+1
;	len -> Y+0
;PCODE: $00000074 VOL: 0
; 0000 0076     i2c_write(devAddr);
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0077     i2c_write(memAddr);
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0078     while (len--) {
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0079         i2c_write(*data++);
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 007A     }
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 007B     i2c_stop();
;PCODE: $00000086 VOL: 0
; 0000 007C     delay_ms(5);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 007D }
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;void EEPROM_readPage(unsigned char devAddr, unsigned char memAddr, unsigned char* data, unsigned char len){
; 0000 007E void EEPROM_readPage(unsigned char devAddr, unsigned char memAddr, unsigned char* data, unsigned char len){
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 007F     i2c_start();
;PCODE: $0000008F VOL: 0
;	devAddr -> Y+4
;	memAddr -> Y+3
;	*data -> Y+1
;	len -> Y+0
;PCODE: $00000090 VOL: 0
; 0000 0080     i2c_write(devAddr);
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0081     i2c_write(memAddr);
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 0082     i2c_start();
;PCODE: $00000095 VOL: 0
; 0000 0083     i2c_write(devAddr | 1);
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0084     while (--len) {
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0085         *data++ = i2c_read(1);
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 0086     }
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 0087     *data = i2c_read(0);
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0088     i2c_stop();
;PCODE: $000000AE VOL: 0
; 0000 0089 }
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
