
AVRASM ver. 2.1.30  C:\Users\MrCrazy\Desktop\EEPROM\Debug\List\eeprom.asm Fri Jun 19 10:10:10 2020

C:\Users\MrCrazy\Desktop\EEPROM\Debug\List\eeprom.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\Users\MrCrazy\Desktop\EEPROM\Debug\List\eeprom.asm(1089): warning: Register r4 already defined by the .DEF directive
C:\Users\MrCrazy\Desktop\EEPROM\Debug\List\eeprom.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16A
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16A
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0038 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x2000003:
000033 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000034 0002      	.DW  0x02
000035 0160      	.DW  __base_y_G100
000036 0066      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000037 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000038 94f8      	CLI
000039 27ee      	CLR  R30
00003a bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003b e0f1      	LDI  R31,1
00003c bffb      	OUT  GICR,R31
00003d bfeb      	OUT  GICR,R30
00003e bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00003f e08d      	LDI  R24,(14-2)+1
000040 e0a2      	LDI  R26,2
000041 27bb      	CLR  R27
                 __CLEAR_REG:
000042 93ed      	ST   X+,R30
000043 958a      	DEC  R24
000044 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000045 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000046 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000047 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000048 93ed      	ST   X+,R30
000049 9701      	SBIW R24,1
00004a f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004b e6e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004c e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00004d 9185      	LPM  R24,Z+
00004e 9195      	LPM  R25,Z+
00004f 9700      	SBIW R24,0
000050 f061      	BREQ __GLOBAL_INI_END
000051 91a5      	LPM  R26,Z+
000052 91b5      	LPM  R27,Z+
000053 9005      	LPM  R0,Z+
000054 9015      	LPM  R1,Z+
000055 01bf      	MOVW R22,R30
000056 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000057 9005      	LPM  R0,Z+
000058 920d      	ST   X+,R0
000059 9701      	SBIW R24,1
00005a f7e1      	BRNE __GLOBAL_INI_LOOP
00005b 01fb      	MOVW R30,R22
00005c cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00005d e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00005e bfed      	OUT  SPL,R30
00005f e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000060 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000061 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000062 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000063 940c 0065 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;// I2C Bus functions
                 ;#include <i2c.h>
                 ;
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;
                 ;#include <delay.h>
                 ;
                 ;// Declare your global variables here
                 ;
                 ;#define DEVICE_ADDR            0xA0
                 ;
                 ;void EEPROM_writeByte(unsigned char devAddr, unsigned char memAddr, unsigned char data);
                 ;unsigned char EEPROM_readByte(unsigned char devAddr, unsigned char memAddr);
                 ;
                 ;void EEPROM_writePage(unsigned char devAddr, unsigned char memAddr, unsigned char* data, unsigned char len);
                 ;void EEPROM_readPage(unsigned char devAddr, unsigned char memAddr, unsigned char* data, unsigned char len);
                 ;
                 ;#include <stdio.h>
                 ;
                 ;
                 ;void main(void)
                 ; 0000 0019 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 001A // Declare your local variables here
                 ; 0000 001B unsigned char data;
                 ; 0000 001C char tempStr[6] = "Hello";
                 ; 0000 001D char str[16];
                 ; 0000 001E 
                 ; 0000 001F // Input/Output Ports initialization
                 ; 0000 0020 // Port A initialization
                 ; 0000 0021 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0022 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
000065 9766      	SBIW R28,22
000066 e4e8      	LDI  R30,LOW(72)
000067 8be8      	STD  Y+16,R30
000068 e6e5      	LDI  R30,LOW(101)
000069 8be9      	STD  Y+17,R30
00006a e6ec      	LDI  R30,LOW(108)
00006b 8bea      	STD  Y+18,R30
00006c 8beb      	STD  Y+19,R30
00006d e6ef      	LDI  R30,LOW(111)
00006e 8bec      	STD  Y+20,R30
00006f e0e0      	LDI  R30,LOW(0)
000070 8bed      	STD  Y+21,R30
                 ;	data -> R17
                 ;	tempStr -> Y+16
                 ;	str -> Y+0
000071 bbea      	OUT  0x1A,R30
                 ; 0000 0023 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0024 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000072 bbeb      	OUT  0x1B,R30
                 ; 0000 0025 
                 ; 0000 0026 // Port B initialization
                 ; 0000 0027 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0028 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
000073 bbe7      	OUT  0x17,R30
                 ; 0000 0029 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 002A PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000074 bbe8      	OUT  0x18,R30
                 ; 0000 002B 
                 ; 0000 002C // Port C initialization
                 ; 0000 002D // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 002E DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000075 bbe4      	OUT  0x14,R30
                 ; 0000 002F // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0030 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000076 bbe5      	OUT  0x15,R30
                 ; 0000 0031 
                 ; 0000 0032 // Port D initialization
                 ; 0000 0033 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0034 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
000077 bbe1      	OUT  0x11,R30
                 ; 0000 0035 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0036 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000078 bbe2      	OUT  0x12,R30
                 ; 0000 0037 
                 ; 0000 0038 // Bit-Banged I2C Bus initialization
                 ; 0000 0039 // I2C Port: PORTD
                 ; 0000 003A // I2C SDA bit: 1
                 ; 0000 003B // I2C SCL bit: 0
                 ; 0000 003C // Bit Rate: 100 kHz
                 ; 0000 003D // Note: I2C settings are specified in the
                 ; 0000 003E // Project|Configure|C Compiler|Libraries|I2C menu.
                 ; 0000 003F i2c_init();
000079 940e 0177 	CALL _i2c_init
                 ; 0000 0040 
                 ; 0000 0041 // Alphanumeric LCD initialization
                 ; 0000 0042 // Connections are specified in the
                 ; 0000 0043 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 0044 // RS - PORTA Bit 0
                 ; 0000 0045 // RD - PORTA Bit 1
                 ; 0000 0046 // EN - PORTA Bit 2
                 ; 0000 0047 // D4 - PORTA Bit 4
                 ; 0000 0048 // D5 - PORTA Bit 5
                 ; 0000 0049 // D6 - PORTA Bit 6
                 ; 0000 004A // D7 - PORTA Bit 7
                 ; 0000 004B // Characters/line: 16
                 ; 0000 004C lcd_init(16);
00007b e1a0      	LDI  R26,LOW(16)
00007c d0b5      	RCALL _lcd_init
                 ; 0000 004D 
                 ; 0000 004E /*data = EEPROM_readByte(DEVICE_ADDR, 20);
                 ; 0000 004F sprintf(str, "%u", data);
                 ; 0000 0050 EEPROM_writeByte(DEVICE_ADDR, 20, ++data);*/
                 ; 0000 0051 
                 ; 0000 0052 EEPROM_writePage(DEVICE_ADDR, 25, tempStr, sizeof(tempStr));
00007d eae0      	LDI  R30,LOW(160)
00007e 93ea      	ST   -Y,R30
00007f e1e9      	LDI  R30,LOW(25)
000080 93ea      	ST   -Y,R30
000081 01fe      	MOVW R30,R28
000082 9672      	ADIW R30,18
000083 93fa      	ST   -Y,R31
000084 93ea      	ST   -Y,R30
000085 e0a6      	LDI  R26,LOW(6)
000086 d00f      	RCALL _EEPROM_writePage
                 ; 0000 0053 EEPROM_readPage(DEVICE_ADDR, 25, str, sizeof(tempStr));
000087 eae0      	LDI  R30,LOW(160)
000088 93ea      	ST   -Y,R30
000089 e1e9      	LDI  R30,LOW(25)
00008a 93ea      	ST   -Y,R30
00008b 01fe      	MOVW R30,R28
00008c 9632      	ADIW R30,2
00008d 93fa      	ST   -Y,R31
00008e 93ea      	ST   -Y,R30
00008f e0a6      	LDI  R26,LOW(6)
000090 d01c      	RCALL _EEPROM_readPage
                 ; 0000 0054 
                 ; 0000 0055 lcd_clear();
000091 d06e      	RCALL _lcd_clear
                 ; 0000 0056 lcd_puts(str);
000092 01de      	MOVW R26,R28
000093 d08d      	RCALL _lcd_puts
                 ; 0000 0057 
                 ; 0000 0058 
                 ; 0000 0059 while (1)
                 _0x3:
                 ; 0000 005A       {
                 ; 0000 005B       // Place your code here
                 ; 0000 005C 
                 ; 0000 005D       }
000094 cfff      	RJMP _0x3
                 ; 0000 005E }
                 _0x6:
000095 cfff      	RJMP _0x6
                 ; .FEND
                 ;
                 ;void EEPROM_writeByte(unsigned char devAddr, unsigned char memAddr, unsigned char data){
                 ; 0000 0060 void EEPROM_writeByte(unsigned char devAddr, unsigned char memAddr, unsigned char data){
                 ; 0000 0061     i2c_start();
                 ;	devAddr -> Y+2
                 ;	memAddr -> Y+1
                 ;	data -> Y+0
                 ; 0000 0062     i2c_write(devAddr);
                 ; 0000 0063     i2c_write(memAddr);
                 ; 0000 0064     i2c_write(data);
                 ; 0000 0065     i2c_stop();
                 ; 0000 0066     delay_ms(5);
                 ; 0000 0067 }
                 ;unsigned char EEPROM_readByte(unsigned char devAddr, unsigned char memAddr){
                 ; 0000 0068 unsigned char EEPROM_readByte(unsigned char devAddr, unsigned char memAddr){
                 ; 0000 0069     unsigned char temp;
                 ; 0000 006A     i2c_start();
                 ;	devAddr -> Y+2
                 ;	memAddr -> Y+1
                 ;	temp -> R17
                 ; 0000 006B     i2c_write(devAddr);
                 ; 0000 006C     i2c_write(memAddr);
                 ; 0000 006D     i2c_start();
                 ; 0000 006E     i2c_write(devAddr | 1);
                 ; 0000 006F     temp = i2c_read(0);
                 ; 0000 0070     i2c_stop();
                 ; 0000 0071     return temp;
                 ; 0000 0072 }
                 ;
                 ;void EEPROM_writePage(unsigned char devAddr, unsigned char memAddr, unsigned char* data, unsigned char len){
                 ; 0000 0074 void EEPROM_writePage(unsigned char devAddr, unsigned char memAddr, unsigned char* data, unsigned char len){
                 _EEPROM_writePage:
                 ; .FSTART _EEPROM_writePage
                 ; 0000 0075     i2c_start();
000096 940e 0160 	CALL SUBOPT_0x0
                 ;	devAddr -> Y+4
                 ;	memAddr -> Y+3
                 ;	*data -> Y+1
                 ;	len -> Y+0
                 ; 0000 0076     i2c_write(devAddr);
                 ; 0000 0077     i2c_write(memAddr);
                 ; 0000 0078     while (len--) {
                 _0x7:
000098 81e8      	LD   R30,Y
000099 50e1      	SUBI R30,LOW(1)
00009a 83e8      	ST   Y,R30
00009b 5fef      	SUBI R30,-LOW(1)
00009c f049      	BREQ _0x9
                 ; 0000 0079         i2c_write(*data++);
00009d 81a9      	LDD  R26,Y+1
00009e 81ba      	LDD  R27,Y+1+1
00009f 91ed      	LD   R30,X+
0000a0 83a9      	STD  Y+1,R26
0000a1 83ba      	STD  Y+1+1,R27
0000a2 2fae      	MOV  R26,R30
0000a3 940e 01b0 	CALL _i2c_write
                 ; 0000 007A     }
0000a5 cff2      	RJMP _0x7
                 _0x9:
                 ; 0000 007B     i2c_stop();
0000a6 940e 018b 	CALL _i2c_stop
                 ; 0000 007C     delay_ms(5);
0000a8 e0a5      	LDI  R26,LOW(5)
0000a9 e0b0      	LDI  R27,0
0000aa 940e 01c8 	CALL _delay_ms
                 ; 0000 007D }
0000ac c024      	RJMP _0x2080002
                 ; .FEND
                 ;void EEPROM_readPage(unsigned char devAddr, unsigned char memAddr, unsigned char* data, unsigned char len){
                 ; 0000 007E void EEPROM_readPage(unsigned char devAddr, unsigned char memAddr, unsigned char* data, unsigned char len){
                 _EEPROM_readPage:
                 ; .FSTART _EEPROM_readPage
                 ; 0000 007F     i2c_start();
0000ad 940e 0160 	CALL SUBOPT_0x0
                 ;	devAddr -> Y+4
                 ;	memAddr -> Y+3
                 ;	*data -> Y+1
                 ;	len -> Y+0
                 ; 0000 0080     i2c_write(devAddr);
                 ; 0000 0081     i2c_write(memAddr);
                 ; 0000 0082     i2c_start();
0000af 940e 017c 	CALL _i2c_start
                 ; 0000 0083     i2c_write(devAddr | 1);
0000b1 81ec      	LDD  R30,Y+4
0000b2 60e1      	ORI  R30,1
0000b3 2fae      	MOV  R26,R30
0000b4 940e 01b0 	CALL _i2c_write
                 ; 0000 0084     while (--len) {
                 _0xA:
0000b6 81e8      	LD   R30,Y
0000b7 50e1      	SUBI R30,LOW(1)
0000b8 83e8      	ST   Y,R30
0000b9 f079      	BREQ _0xC
                 ; 0000 0085         *data++ = i2c_read(1);
0000ba 81e9      	LDD  R30,Y+1
0000bb 81fa      	LDD  R31,Y+1+1
0000bc 9631      	ADIW R30,1
0000bd 83e9      	STD  Y+1,R30
0000be 83fa      	STD  Y+1+1,R31
0000bf 9731      	SBIW R30,1
0000c0 93ff      	PUSH R31
0000c1 93ef      	PUSH R30
0000c2 e0a1      	LDI  R26,LOW(1)
0000c3 940e 0195 	CALL _i2c_read
0000c5 91af      	POP  R26
0000c6 91bf      	POP  R27
0000c7 93ec      	ST   X,R30
                 ; 0000 0086     }
0000c8 cfed      	RJMP _0xA
                 _0xC:
                 ; 0000 0087     *data = i2c_read(0);
0000c9 e0a0      	LDI  R26,LOW(0)
0000ca 940e 0195 	CALL _i2c_read
0000cc 81a9      	LDD  R26,Y+1
0000cd 81ba      	LDD  R27,Y+1+1
0000ce 93ec      	ST   X,R30
                 ; 0000 0088     i2c_stop();
0000cf 940e 018b 	CALL _i2c_stop
                 ; 0000 0089 }
                 _0x2080002:
0000d1 9625      	ADIW R28,5
0000d2 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0000d3 93aa      	ST   -Y,R26
0000d4 b3eb      	IN   R30,0x1B
0000d5 70ef      	ANDI R30,LOW(0xF)
0000d6 2fae      	MOV  R26,R30
0000d7 81e8      	LD   R30,Y
0000d8 7fe0      	ANDI R30,LOW(0xF0)
0000d9 2bea      	OR   R30,R26
0000da bbeb      	OUT  0x1B,R30
                +
0000db e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000dc 958a     +DEC R24
0000dd f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000de 9ada      	SBI  0x1B,2
                +
0000df e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000e0 958a     +DEC R24
0000e1 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000e2 98da      	CBI  0x1B,2
                +
0000e3 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000e4 958a     +DEC R24
0000e5 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000e6 c077      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0000e7 93aa      	ST   -Y,R26
0000e8 81a8      	LD   R26,Y
0000e9 dfe9      	RCALL __lcd_write_nibble_G100
0000ea 81e8          ld    r30,y
0000eb 95e2          swap  r30
0000ec 83e8          st    y,r30
0000ed 81a8      	LD   R26,Y
0000ee dfe4      	RCALL __lcd_write_nibble_G100
                +
0000ef e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0000f0 958a     +DEC R24
0000f1 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0000f2 c06b      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0000f3 93aa      	ST   -Y,R26
0000f4 81e8      	LD   R30,Y
0000f5 e0f0      	LDI  R31,0
0000f6 5ae0      	SUBI R30,LOW(-__base_y_G100)
0000f7 4ffe      	SBCI R31,HIGH(-__base_y_G100)
0000f8 81e0      	LD   R30,Z
0000f9 81a9      	LDD  R26,Y+1
0000fa 0fae      	ADD  R26,R30
0000fb dfeb      	RCALL __lcd_write_data
0000fc 8059      	LDD  R5,Y+1
0000fd 8048      	LDD  R4,Y+0
0000fe 9622      	ADIW R28,2
0000ff 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000100 e0a2      	LDI  R26,LOW(2)
000101 940e 0169 	CALL SUBOPT_0x1
000103 e0ac      	LDI  R26,LOW(12)
000104 dfe2      	RCALL __lcd_write_data
000105 e0a1      	LDI  R26,LOW(1)
000106 940e 0169 	CALL SUBOPT_0x1
000108 e0e0      	LDI  R30,LOW(0)
000109 2e4e      	MOV  R4,R30
00010a 2e5e      	MOV  R5,R30
00010b 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00010c 93aa      	ST   -Y,R26
00010d 81a8      	LD   R26,Y
00010e 30aa      	CPI  R26,LOW(0xA)
00010f f011      	BREQ _0x2000005
000110 1457      	CP   R5,R7
000111 f048      	BRLO _0x2000004
                 _0x2000005:
000112 e0e0      	LDI  R30,LOW(0)
000113 93ea      	ST   -Y,R30
000114 9443      	INC  R4
000115 2da4      	MOV  R26,R4
000116 dfdc      	RCALL _lcd_gotoxy
000117 81a8      	LD   R26,Y
000118 30aa      	CPI  R26,LOW(0xA)
000119 f409      	BRNE _0x2000007
00011a c043      	RJMP _0x2080001
                 _0x2000007:
                 _0x2000004:
00011b 9453      	INC  R5
00011c 9ad8      	SBI  0x1B,0
00011d 81a8      	LD   R26,Y
00011e dfc8      	RCALL __lcd_write_data
00011f 98d8      	CBI  0x1B,0
000120 c03d      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000121 93ba      	ST   -Y,R27
000122 93aa      	ST   -Y,R26
000123 931a      	ST   -Y,R17
                 _0x2000008:
000124 81a9      	LDD  R26,Y+1
000125 81ba      	LDD  R27,Y+1+1
000126 91ed      	LD   R30,X+
000127 83a9      	STD  Y+1,R26
000128 83ba      	STD  Y+1+1,R27
000129 2f1e      	MOV  R17,R30
00012a 30e0      	CPI  R30,0
00012b f019      	BREQ _0x200000A
00012c 2fa1      	MOV  R26,R17
00012d dfde      	RCALL _lcd_putchar
00012e cff5      	RJMP _0x2000008
                 _0x200000A:
00012f 8118      	LDD  R17,Y+0
000130 9623      	ADIW R28,3
000131 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000132 93aa      	ST   -Y,R26
000133 b3ea      	IN   R30,0x1A
000134 6fe0      	ORI  R30,LOW(0xF0)
000135 bbea      	OUT  0x1A,R30
000136 9ad2      	SBI  0x1A,2
000137 9ad0      	SBI  0x1A,0
000138 9ad1      	SBI  0x1A,1
000139 98da      	CBI  0x1B,2
00013a 98d8      	CBI  0x1B,0
00013b 98d9      	CBI  0x1B,1
00013c 8078      	LDD  R7,Y+0
00013d 81e8      	LD   R30,Y
00013e 58e0      	SUBI R30,-LOW(128)
                +
00013f 93e0 0162+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000141 81e8      	LD   R30,Y
000142 54e0      	SUBI R30,-LOW(192)
                +
000143 93e0 0163+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000145 e1a4      	LDI  R26,LOW(20)
000146 e0b0      	LDI  R27,0
000147 940e 01c8 	CALL _delay_ms
000149 940e 016f 	CALL SUBOPT_0x2
00014b 940e 016f 	CALL SUBOPT_0x2
00014d 940e 016f 	CALL SUBOPT_0x2
00014f e2a0      	LDI  R26,LOW(32)
000150 df82      	RCALL __lcd_write_nibble_G100
                +
000151 ec88     +LDI R24 , LOW ( 200 )
000152 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000153 9701     +SBIW R24 , 1
000154 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000155 e2a8      	LDI  R26,LOW(40)
000156 df90      	RCALL __lcd_write_data
000157 e0a4      	LDI  R26,LOW(4)
000158 df8e      	RCALL __lcd_write_data
000159 e8a5      	LDI  R26,LOW(133)
00015a df8c      	RCALL __lcd_write_data
00015b e0a6      	LDI  R26,LOW(6)
00015c df8a      	RCALL __lcd_write_data
00015d dfa2      	RCALL _lcd_clear
                 _0x2080001:
00015e 9621      	ADIW R28,1
00015f 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 __base_y_G100:
000160           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x0:
000160 93aa      	ST   -Y,R26
000161 940e 017c 	CALL _i2c_start
000163 81ac      	LDD  R26,Y+4
000164 940e 01b0 	CALL _i2c_write
000166 81ab      	LDD  R26,Y+3
000167 940c 01b0 	JMP  _i2c_write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000169 940e 00e7 	CALL __lcd_write_data
00016b e0a3      	LDI  R26,LOW(3)
00016c e0b0      	LDI  R27,0
00016d 940c 01c8 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2:
00016f e3a0      	LDI  R26,LOW(48)
000170 940e 00d3 	CALL __lcd_write_nibble_G100
                +
000172 ec88     +LDI R24 , LOW ( 200 )
000173 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000174 9701     +SBIW R24 , 1
000175 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000176 9508      	RET
                 
                 
                 	.CSEG
                 	.equ __sda_bit=1
                 	.equ __scl_bit=0
                 	.equ __i2c_port=0x12 ;PORTD
                 	.equ __i2c_dir=__i2c_port-1
                 	.equ __i2c_pin=__i2c_port-2
                 
                 _i2c_init:
000177 9890      	cbi  __i2c_port,__scl_bit
000178 9891      	cbi  __i2c_port,__sda_bit
000179 9a88      	sbi  __i2c_dir,__scl_bit
00017a 9889      	cbi  __i2c_dir,__sda_bit
00017b c015      	rjmp __i2c_delay2
                 _i2c_start:
00017c 9889      	cbi  __i2c_dir,__sda_bit
00017d 9888      	cbi  __i2c_dir,__scl_bit
00017e 27ee      	clr  r30
00017f 0000      	nop
000180 9b81      	sbis __i2c_pin,__sda_bit
000181 9508      	ret
000182 9b80      	sbis __i2c_pin,__scl_bit
000183 9508      	ret
000184 d004      	rcall __i2c_delay1
000185 9a89      	sbi  __i2c_dir,__sda_bit
000186 d002      	rcall __i2c_delay1
000187 9a88      	sbi  __i2c_dir,__scl_bit
000188 e0e1      	ldi  r30,1
                 __i2c_delay1:
000189 e06d      	ldi  r22,13
00018a c007      	rjmp __i2c_delay2l
                 _i2c_stop:
00018b 9a89      	sbi  __i2c_dir,__sda_bit
00018c 9a88      	sbi  __i2c_dir,__scl_bit
00018d d003      	rcall __i2c_delay2
00018e 9888      	cbi  __i2c_dir,__scl_bit
00018f dff9      	rcall __i2c_delay1
000190 9889      	cbi  __i2c_dir,__sda_bit
                 __i2c_delay2:
000191 e16b      	ldi  r22,27
                 __i2c_delay2l:
000192 956a      	dec  r22
000193 f7f1      	brne __i2c_delay2l
000194 9508      	ret
                 _i2c_read:
000195 e078      	ldi  r23,8
                 __i2c_read0:
000196 9888      	cbi  __i2c_dir,__scl_bit
000197 dff1      	rcall __i2c_delay1
                 __i2c_read3:
000198 9b80      	sbis __i2c_pin,__scl_bit
000199 cffe      	rjmp __i2c_read3
00019a dfee      	rcall __i2c_delay1
00019b 9488      	clc
00019c 9981      	sbic __i2c_pin,__sda_bit
00019d 9408      	sec
00019e 9a88      	sbi  __i2c_dir,__scl_bit
00019f dff1      	rcall __i2c_delay2
0001a0 1fee      	rol  r30
0001a1 957a      	dec  r23
0001a2 f799      	brne __i2c_read0
0001a3 2f7a      	mov  r23,r26
0001a4 2377      	tst  r23
0001a5 f411      	brne __i2c_read1
0001a6 9889      	cbi  __i2c_dir,__sda_bit
0001a7 c001      	rjmp __i2c_read2
                 __i2c_read1:
0001a8 9a89      	sbi  __i2c_dir,__sda_bit
                 __i2c_read2:
0001a9 dfdf      	rcall __i2c_delay1
0001aa 9888      	cbi  __i2c_dir,__scl_bit
0001ab dfe5      	rcall __i2c_delay2
0001ac 9a88      	sbi  __i2c_dir,__scl_bit
0001ad dfdb      	rcall __i2c_delay1
0001ae 9889      	cbi  __i2c_dir,__sda_bit
0001af cfd9      	rjmp __i2c_delay1
                 
                 _i2c_write:
0001b0 e078      	ldi  r23,8
                 __i2c_write0:
0001b1 0faa      	lsl  r26
0001b2 f410      	brcc __i2c_write1
0001b3 9889      	cbi  __i2c_dir,__sda_bit
0001b4 c001      	rjmp __i2c_write2
                 __i2c_write1:
0001b5 9a89      	sbi  __i2c_dir,__sda_bit
                 __i2c_write2:
0001b6 dfda      	rcall __i2c_delay2
0001b7 9888      	cbi  __i2c_dir,__scl_bit
0001b8 dfd0      	rcall __i2c_delay1
                 __i2c_write3:
0001b9 9b80      	sbis __i2c_pin,__scl_bit
0001ba cffe      	rjmp __i2c_write3
0001bb dfcd      	rcall __i2c_delay1
0001bc 9a88      	sbi  __i2c_dir,__scl_bit
0001bd 957a      	dec  r23
0001be f791      	brne __i2c_write0
0001bf 9889      	cbi  __i2c_dir,__sda_bit
0001c0 dfc8      	rcall __i2c_delay1
0001c1 9888      	cbi  __i2c_dir,__scl_bit
0001c2 dfce      	rcall __i2c_delay2
0001c3 e0e1      	ldi  r30,1
0001c4 9981      	sbic __i2c_pin,__sda_bit
0001c5 27ee      	clr  r30
0001c6 9a88      	sbi  __i2c_dir,__scl_bit
0001c7 cfc1      	rjmp __i2c_delay1
                 
                 _delay_ms:
0001c8 9610      	adiw r26,0
0001c9 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0001ca ed80     +LDI R24 , LOW ( 0x7D0 )
0001cb e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0001cc 9701     +SBIW R24 , 1
0001cd f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0001ce 95a8      	wdr
0001cf 9711      	sbiw r26,1
0001d0 f7c9      	brne __delay_ms0
                 __delay_ms1:
0001d1 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16A register use summary:
r0 :   4 r1 :   1 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   4 r18:   0 r19:   0 r20:   0 r21:   0 r22:   5 r23:   6 
r24:  21 r25:   5 r26:  55 r27:  12 r28:   9 r29:   1 r30: 102 r31:  10 
x  :   7 y  :  61 z  :   8 
Registers used: 19 out of 35 (54.3%)

ATmega16A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   1 
adiw  :   8 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   6 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  16 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  21 
cbi   :  20 cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 
clr   :   4 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   1 cpc   :   0 cpi   :   3 cpse  :   0 dec   :   8 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   2 jmp   :  24 ld    :  15 ldd   :  16 ldi   :  60 
lds   :   0 lpm   :   7 lsl   :   1 lsr   :   0 mov   :   9 movw  :   6 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   1 or    :   1 
ori   :   2 out   :  16 pop   :   2 push  :   2 rcall :  33 ret   :  10 
reti  :   0 rjmp  :  19 rol   :   1 ror   :   0 sbc   :   0 sbci  :   1 
sbi   :  16 sbic  :   2 sbis  :   4 sbiw  :   9 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   1 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  26 std   :  12 sts   :   2 sub   :   0 subi  :   6 swap  :   1 
tst   :   1 wdr   :   1 
Instructions used: 48 out of 116 (41.4%)

ATmega16A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0003a4    904     28    932   16384   5.7%
[.dseg] 0x000060 0x000164      0      4      4    1024   0.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 3 warnings
